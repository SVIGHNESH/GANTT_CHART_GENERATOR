{"ast":null,"code":"import date_utils from './date_utils';\nimport { $, createSVG } from './svg_utils';\nimport Bar from './bar';\nimport Arrow from './arrow';\nimport Popup from './popup';\nimport './gantt.scss';\nconst VIEW_MODE = {\n  QUARTER_DAY: 'Quarter Day',\n  HALF_DAY: 'Half Day',\n  DAY: 'Day',\n  WEEK: 'Week',\n  MONTH: 'Month',\n  YEAR: 'Year'\n};\nexport default class Gantt {\n  constructor(wrapper, tasks, options) {\n    this.setup_wrapper(wrapper);\n    this.setup_options(options);\n    this.setup_tasks(tasks);\n    // initialize with default view mode\n    this.change_view_mode();\n    this.bind_events();\n  }\n  setup_wrapper(element) {\n    let svg_element, wrapper_element;\n\n    // CSS Selector is passed\n    if (typeof element === 'string') {\n      element = document.querySelector(element);\n    }\n\n    // get the SVGElement\n    if (element instanceof HTMLElement) {\n      wrapper_element = element;\n      svg_element = element.querySelector('svg');\n    } else if (element instanceof SVGElement) {\n      svg_element = element;\n    } else {\n      throw new TypeError('FrappÃ© Gantt only supports usage of a string CSS selector,' + \" HTML DOM element or SVG DOM element for the 'element' parameter\");\n    }\n\n    // svg element\n    if (!svg_element) {\n      // create it\n      this.$svg = createSVG('svg', {\n        append_to: wrapper_element,\n        class: 'gantt'\n      });\n    } else {\n      this.$svg = svg_element;\n      this.$svg.classList.add('gantt');\n    }\n\n    // wrapper element\n    this.$container = document.createElement('div');\n    this.$container.classList.add('gantt-container');\n    const parent_element = this.$svg.parentElement;\n    parent_element.appendChild(this.$container);\n    this.$container.appendChild(this.$svg);\n\n    // popup wrapper\n    this.popup_wrapper = document.createElement('div');\n    this.popup_wrapper.classList.add('popup-wrapper');\n    this.$container.appendChild(this.popup_wrapper);\n  }\n  setup_options(options) {\n    const default_options = {\n      header_height: 50,\n      column_width: 30,\n      step: 24,\n      view_modes: [...Object.values(VIEW_MODE)],\n      bar_height: 20,\n      bar_corner_radius: 3,\n      arrow_curve: 5,\n      padding: 18,\n      view_mode: 'Day',\n      date_format: 'YYYY-MM-DD',\n      popup_trigger: 'click',\n      custom_popup_html: null,\n      language: 'en'\n    };\n    this.options = Object.assign({}, default_options, options);\n  }\n  setup_tasks(tasks) {\n    // prepare tasks\n    this.tasks = tasks.map((task, i) => {\n      // convert to Date objects\n      task._start = date_utils.parse(task.start);\n      task._end = date_utils.parse(task.end);\n\n      // make task invalid if duration too large\n      if (date_utils.diff(task._end, task._start, 'year') > 10) {\n        task.end = null;\n      }\n\n      // cache index\n      task._index = i;\n\n      // invalid dates\n      if (!task.start && !task.end) {\n        const today = date_utils.today();\n        task._start = today;\n        task._end = date_utils.add(today, 2, 'day');\n      }\n      if (!task.start && task.end) {\n        task._start = date_utils.add(task._end, -2, 'day');\n      }\n      if (task.start && !task.end) {\n        task._end = date_utils.add(task._start, 2, 'day');\n      }\n\n      // if hours is not set, assume the last day is full day\n      // e.g: 2018-09-09 becomes 2018-09-09 23:59:59\n      const task_end_values = date_utils.get_date_values(task._end);\n      if (task_end_values.slice(3).every(d => d === 0)) {\n        task._end = date_utils.add(task._end, 24, 'hour');\n      }\n\n      // invalid flag\n      if (!task.start || !task.end) {\n        task.invalid = true;\n      }\n\n      // dependencies\n      if (typeof task.dependencies === 'string' || !task.dependencies) {\n        let deps = [];\n        if (task.dependencies) {\n          deps = task.dependencies.split(',').map(d => d.trim()).filter(d => d);\n        }\n        task.dependencies = deps;\n      }\n\n      // uids\n      if (!task.id) {\n        task.id = generate_id(task);\n      }\n      return task;\n    });\n    this.setup_dependencies();\n  }\n  setup_dependencies() {\n    this.dependency_map = {};\n    for (let t of this.tasks) {\n      for (let d of t.dependencies) {\n        this.dependency_map[d] = this.dependency_map[d] || [];\n        this.dependency_map[d].push(t.id);\n      }\n    }\n  }\n  refresh(tasks) {\n    this.setup_tasks(tasks);\n    this.change_view_mode();\n  }\n  change_view_mode(mode = this.options.view_mode) {\n    this.update_view_scale(mode);\n    this.setup_dates();\n    this.render();\n    // fire viewmode_change event\n    this.trigger_event('view_change', [mode]);\n  }\n  update_view_scale(view_mode) {\n    this.options.view_mode = view_mode;\n    if (view_mode === VIEW_MODE.DAY) {\n      this.options.step = 24;\n      this.options.column_width = 38;\n    } else if (view_mode === VIEW_MODE.HALF_DAY) {\n      this.options.step = 24 / 2;\n      this.options.column_width = 38;\n    } else if (view_mode === VIEW_MODE.QUARTER_DAY) {\n      this.options.step = 24 / 4;\n      this.options.column_width = 38;\n    } else if (view_mode === VIEW_MODE.WEEK) {\n      this.options.step = 24 * 7;\n      this.options.column_width = 140;\n    } else if (view_mode === VIEW_MODE.MONTH) {\n      this.options.step = 24 * 30;\n      this.options.column_width = 120;\n    } else if (view_mode === VIEW_MODE.YEAR) {\n      this.options.step = 24 * 365;\n      this.options.column_width = 120;\n    }\n  }\n  setup_dates() {\n    this.setup_gantt_dates();\n    this.setup_date_values();\n  }\n  setup_gantt_dates() {\n    this.gantt_start = this.gantt_end = null;\n    for (let task of this.tasks) {\n      // set global start and end date\n      if (!this.gantt_start || task._start < this.gantt_start) {\n        this.gantt_start = task._start;\n      }\n      if (!this.gantt_end || task._end > this.gantt_end) {\n        this.gantt_end = task._end;\n      }\n    }\n    this.gantt_start = date_utils.start_of(this.gantt_start, 'day');\n    this.gantt_end = date_utils.start_of(this.gantt_end, 'day');\n\n    // add date padding on both sides\n    if (this.view_is([VIEW_MODE.QUARTER_DAY, VIEW_MODE.HALF_DAY])) {\n      this.gantt_start = date_utils.add(this.gantt_start, -7, 'day');\n      this.gantt_end = date_utils.add(this.gantt_end, 7, 'day');\n    } else if (this.view_is(VIEW_MODE.MONTH)) {\n      this.gantt_start = date_utils.start_of(this.gantt_start, 'year');\n      this.gantt_end = date_utils.add(this.gantt_end, 1, 'year');\n    } else if (this.view_is(VIEW_MODE.YEAR)) {\n      this.gantt_start = date_utils.add(this.gantt_start, -2, 'year');\n      this.gantt_end = date_utils.add(this.gantt_end, 2, 'year');\n    } else {\n      this.gantt_start = date_utils.add(this.gantt_start, -1, 'month');\n      this.gantt_end = date_utils.add(this.gantt_end, 1, 'month');\n    }\n  }\n  setup_date_values() {\n    this.dates = [];\n    let cur_date = null;\n    while (cur_date === null || cur_date < this.gantt_end) {\n      if (!cur_date) {\n        cur_date = date_utils.clone(this.gantt_start);\n      } else {\n        if (this.view_is(VIEW_MODE.YEAR)) {\n          cur_date = date_utils.add(cur_date, 1, 'year');\n        } else if (this.view_is(VIEW_MODE.MONTH)) {\n          cur_date = date_utils.add(cur_date, 1, 'month');\n        } else {\n          cur_date = date_utils.add(cur_date, this.options.step, 'hour');\n        }\n      }\n      this.dates.push(cur_date);\n    }\n  }\n  bind_events() {\n    this.bind_grid_click();\n    this.bind_bar_events();\n  }\n  render() {\n    this.clear();\n    this.setup_layers();\n    this.make_grid();\n    this.make_dates();\n    this.make_bars();\n    this.make_arrows();\n    this.map_arrows_on_bars();\n    this.set_width();\n    this.set_scroll_position();\n  }\n  setup_layers() {\n    this.layers = {};\n    const layers = ['grid', 'date', 'arrow', 'progress', 'bar', 'details'];\n    // make group layers\n    for (let layer of layers) {\n      this.layers[layer] = createSVG('g', {\n        class: layer,\n        append_to: this.$svg\n      });\n    }\n  }\n  make_grid() {\n    this.make_grid_background();\n    this.make_grid_rows();\n    this.make_grid_header();\n    this.make_grid_ticks();\n    this.make_grid_highlights();\n  }\n  make_grid_background() {\n    const grid_width = this.dates.length * this.options.column_width;\n    const grid_height = this.options.header_height + this.options.padding + (this.options.bar_height + this.options.padding) * this.tasks.length;\n    createSVG('rect', {\n      x: 0,\n      y: 0,\n      width: grid_width,\n      height: grid_height,\n      class: 'grid-background',\n      append_to: this.layers.grid\n    });\n    $.attr(this.$svg, {\n      height: grid_height + this.options.padding + 100,\n      width: '100%'\n    });\n  }\n  make_grid_rows() {\n    const rows_layer = createSVG('g', {\n      append_to: this.layers.grid\n    });\n    const lines_layer = createSVG('g', {\n      append_to: this.layers.grid\n    });\n    const row_width = this.dates.length * this.options.column_width;\n    const row_height = this.options.bar_height + this.options.padding;\n    let row_y = this.options.header_height + this.options.padding / 2;\n    for (let task of this.tasks) {\n      createSVG('rect', {\n        x: 0,\n        y: row_y,\n        width: row_width,\n        height: row_height,\n        class: 'grid-row',\n        append_to: rows_layer\n      });\n      createSVG('line', {\n        x1: 0,\n        y1: row_y + row_height,\n        x2: row_width,\n        y2: row_y + row_height,\n        class: 'row-line',\n        append_to: lines_layer\n      });\n      row_y += this.options.bar_height + this.options.padding;\n    }\n  }\n  make_grid_header() {\n    const header_width = this.dates.length * this.options.column_width;\n    const header_height = this.options.header_height + 10;\n    createSVG('rect', {\n      x: 0,\n      y: 0,\n      width: header_width,\n      height: header_height,\n      class: 'grid-header',\n      append_to: this.layers.grid\n    });\n  }\n  make_grid_ticks() {\n    let tick_x = 0;\n    let tick_y = this.options.header_height + this.options.padding / 2;\n    let tick_height = (this.options.bar_height + this.options.padding) * this.tasks.length;\n    for (let date of this.dates) {\n      let tick_class = 'tick';\n      // thick tick for monday\n      if (this.view_is(VIEW_MODE.DAY) && date.getDate() === 1) {\n        tick_class += ' thick';\n      }\n      // thick tick for first week\n      if (this.view_is(VIEW_MODE.WEEK) && date.getDate() >= 1 && date.getDate() < 8) {\n        tick_class += ' thick';\n      }\n      // thick ticks for quarters\n      if (this.view_is(VIEW_MODE.MONTH) && (date.getMonth() + 1) % 3 === 0) {\n        tick_class += ' thick';\n      }\n      createSVG('path', {\n        d: `M ${tick_x} ${tick_y} v ${tick_height}`,\n        class: tick_class,\n        append_to: this.layers.grid\n      });\n      if (this.view_is(VIEW_MODE.MONTH)) {\n        tick_x += date_utils.get_days_in_month(date) * this.options.column_width / 30;\n      } else {\n        tick_x += this.options.column_width;\n      }\n    }\n  }\n  make_grid_highlights() {\n    // highlight today's date\n    if (this.view_is(VIEW_MODE.DAY)) {\n      const x = date_utils.diff(date_utils.today(), this.gantt_start, 'hour') / this.options.step * this.options.column_width;\n      const y = 0;\n      const width = this.options.column_width;\n      const height = (this.options.bar_height + this.options.padding) * this.tasks.length + this.options.header_height + this.options.padding / 2;\n      createSVG('rect', {\n        x,\n        y,\n        width,\n        height,\n        class: 'today-highlight',\n        append_to: this.layers.grid\n      });\n    }\n  }\n  make_dates() {\n    for (let date of this.get_dates_to_draw()) {\n      createSVG('text', {\n        x: date.lower_x,\n        y: date.lower_y,\n        innerHTML: date.lower_text,\n        class: 'lower-text',\n        append_to: this.layers.date\n      });\n      if (date.upper_text) {\n        const $upper_text = createSVG('text', {\n          x: date.upper_x,\n          y: date.upper_y,\n          innerHTML: date.upper_text,\n          class: 'upper-text',\n          append_to: this.layers.date\n        });\n\n        // remove out-of-bound dates\n        if ($upper_text.getBBox().x2 > this.layers.grid.getBBox().width) {\n          $upper_text.remove();\n        }\n      }\n    }\n  }\n  get_dates_to_draw() {\n    let last_date = null;\n    const dates = this.dates.map((date, i) => {\n      const d = this.get_date_info(date, last_date, i);\n      last_date = date;\n      return d;\n    });\n    return dates;\n  }\n  get_date_info(date, last_date, i) {\n    if (!last_date) {\n      last_date = date_utils.add(date, 1, 'year');\n    }\n    const date_text = {\n      'Quarter Day_lower': date_utils.format(date, 'HH', this.options.language),\n      'Half Day_lower': date_utils.format(date, 'HH', this.options.language),\n      Day_lower: date.getDate() !== last_date.getDate() ? date_utils.format(date, 'D', this.options.language) : '',\n      Week_lower: date.getMonth() !== last_date.getMonth() ? date_utils.format(date, 'D MMM', this.options.language) : date_utils.format(date, 'D', this.options.language),\n      Month_lower: date_utils.format(date, 'MMMM', this.options.language),\n      Year_lower: date_utils.format(date, 'YYYY', this.options.language),\n      'Quarter Day_upper': date.getDate() !== last_date.getDate() ? date_utils.format(date, 'D MMM', this.options.language) : '',\n      'Half Day_upper': date.getDate() !== last_date.getDate() ? date.getMonth() !== last_date.getMonth() ? date_utils.format(date, 'D MMM', this.options.language) : date_utils.format(date, 'D', this.options.language) : '',\n      Day_upper: date.getMonth() !== last_date.getMonth() ? date_utils.format(date, 'MMMM', this.options.language) : '',\n      Week_upper: date.getMonth() !== last_date.getMonth() ? date_utils.format(date, 'MMMM', this.options.language) : '',\n      Month_upper: date.getFullYear() !== last_date.getFullYear() ? date_utils.format(date, 'YYYY', this.options.language) : '',\n      Year_upper: date.getFullYear() !== last_date.getFullYear() ? date_utils.format(date, 'YYYY', this.options.language) : ''\n    };\n    const base_pos = {\n      x: i * this.options.column_width,\n      lower_y: this.options.header_height,\n      upper_y: this.options.header_height - 25\n    };\n    const x_pos = {\n      'Quarter Day_lower': this.options.column_width * 4 / 2,\n      'Quarter Day_upper': 0,\n      'Half Day_lower': this.options.column_width * 2 / 2,\n      'Half Day_upper': 0,\n      Day_lower: this.options.column_width / 2,\n      Day_upper: this.options.column_width * 30 / 2,\n      Week_lower: 0,\n      Week_upper: this.options.column_width * 4 / 2,\n      Month_lower: this.options.column_width / 2,\n      Month_upper: this.options.column_width * 12 / 2,\n      Year_lower: this.options.column_width / 2,\n      Year_upper: this.options.column_width * 30 / 2\n    };\n    return {\n      upper_text: date_text[`${this.options.view_mode}_upper`],\n      lower_text: date_text[`${this.options.view_mode}_lower`],\n      upper_x: base_pos.x + x_pos[`${this.options.view_mode}_upper`],\n      upper_y: base_pos.upper_y,\n      lower_x: base_pos.x + x_pos[`${this.options.view_mode}_lower`],\n      lower_y: base_pos.lower_y\n    };\n  }\n  make_bars() {\n    this.bars = this.tasks.map(task => {\n      const bar = new Bar(this, task);\n      this.layers.bar.appendChild(bar.group);\n      return bar;\n    });\n  }\n  make_arrows() {\n    this.arrows = [];\n    for (let task of this.tasks) {\n      let arrows = [];\n      arrows = task.dependencies.map(task_id => {\n        const dependency = this.get_task(task_id);\n        if (!dependency) return;\n        const arrow = new Arrow(this, this.bars[dependency._index],\n        // from_task\n        this.bars[task._index] // to_task\n        );\n        this.layers.arrow.appendChild(arrow.element);\n        return arrow;\n      }).filter(Boolean); // filter falsy values\n      this.arrows = this.arrows.concat(arrows);\n    }\n  }\n  map_arrows_on_bars() {\n    for (let bar of this.bars) {\n      bar.arrows = this.arrows.filter(arrow => {\n        return arrow.from_task.task.id === bar.task.id || arrow.to_task.task.id === bar.task.id;\n      });\n    }\n  }\n  set_width() {\n    const cur_width = this.$svg.getBoundingClientRect().width;\n    const actual_width = this.$svg.querySelector('.grid .grid-row').getAttribute('width');\n    if (cur_width < actual_width) {\n      this.$svg.setAttribute('width', actual_width);\n    }\n  }\n  set_scroll_position() {\n    const parent_element = this.$svg.parentElement;\n    if (!parent_element) return;\n    const hours_before_first_task = date_utils.diff(this.get_oldest_starting_date(), this.gantt_start, 'hour');\n    const scroll_pos = hours_before_first_task / this.options.step * this.options.column_width - this.options.column_width;\n    parent_element.scrollLeft = scroll_pos;\n  }\n  bind_grid_click() {\n    $.on(this.$svg, this.options.popup_trigger, '.grid-row, .grid-header', () => {\n      this.unselect_all();\n      this.hide_popup();\n    });\n  }\n  bind_bar_events() {\n    let is_dragging = false;\n    let x_on_start = 0;\n    let y_on_start = 0;\n    let is_resizing_left = false;\n    let is_resizing_right = false;\n    let parent_bar_id = null;\n    let bars = []; // instanceof Bar\n    this.bar_being_dragged = null;\n    function action_in_progress() {\n      return is_dragging || is_resizing_left || is_resizing_right;\n    }\n    $.on(this.$svg, 'mousedown', '.bar-wrapper, .handle', (e, element) => {\n      const bar_wrapper = $.closest('.bar-wrapper', element);\n      if (element.classList.contains('left')) {\n        is_resizing_left = true;\n      } else if (element.classList.contains('right')) {\n        is_resizing_right = true;\n      } else if (element.classList.contains('bar-wrapper')) {\n        is_dragging = true;\n      }\n      bar_wrapper.classList.add('active');\n      x_on_start = e.offsetX;\n      y_on_start = e.offsetY;\n      parent_bar_id = bar_wrapper.getAttribute('data-id');\n      const ids = [parent_bar_id, ...this.get_all_dependent_tasks(parent_bar_id)];\n      bars = ids.map(id => this.get_bar(id));\n      this.bar_being_dragged = parent_bar_id;\n      bars.forEach(bar => {\n        const $bar = bar.$bar;\n        $bar.ox = $bar.getX();\n        $bar.oy = $bar.getY();\n        $bar.owidth = $bar.getWidth();\n        $bar.finaldx = 0;\n      });\n    });\n    $.on(this.$svg, 'mousemove', e => {\n      if (!action_in_progress()) return;\n      const dx = e.offsetX - x_on_start;\n      const dy = e.offsetY - y_on_start;\n      bars.forEach(bar => {\n        const $bar = bar.$bar;\n        $bar.finaldx = this.get_snap_position(dx);\n        this.hide_popup();\n        if (is_resizing_left) {\n          if (parent_bar_id === bar.task.id) {\n            bar.update_bar_position({\n              x: $bar.ox + $bar.finaldx,\n              width: $bar.owidth - $bar.finaldx\n            });\n          } else {\n            bar.update_bar_position({\n              x: $bar.ox + $bar.finaldx\n            });\n          }\n        } else if (is_resizing_right) {\n          if (parent_bar_id === bar.task.id) {\n            bar.update_bar_position({\n              width: $bar.owidth + $bar.finaldx\n            });\n          }\n        } else if (is_dragging) {\n          bar.update_bar_position({\n            x: $bar.ox + $bar.finaldx\n          });\n        }\n      });\n    });\n    document.addEventListener('mouseup', e => {\n      if (is_dragging || is_resizing_left || is_resizing_right) {\n        bars.forEach(bar => bar.group.classList.remove('active'));\n      }\n      is_dragging = false;\n      is_resizing_left = false;\n      is_resizing_right = false;\n    });\n    $.on(this.$svg, 'mouseup', e => {\n      this.bar_being_dragged = null;\n      bars.forEach(bar => {\n        const $bar = bar.$bar;\n        if (!$bar.finaldx) return;\n        bar.date_changed();\n        bar.set_action_completed();\n      });\n    });\n    this.bind_bar_progress();\n  }\n  bind_bar_progress() {\n    let x_on_start = 0;\n    let y_on_start = 0;\n    let is_resizing = null;\n    let bar = null;\n    let $bar_progress = null;\n    let $bar = null;\n    $.on(this.$svg, 'mousedown', '.handle.progress', (e, handle) => {\n      is_resizing = true;\n      x_on_start = e.offsetX;\n      y_on_start = e.offsetY;\n      const $bar_wrapper = $.closest('.bar-wrapper', handle);\n      const id = $bar_wrapper.getAttribute('data-id');\n      bar = this.get_bar(id);\n      $bar_progress = bar.$bar_progress;\n      $bar = bar.$bar;\n      $bar_progress.finaldx = 0;\n      $bar_progress.owidth = $bar_progress.getWidth();\n      $bar_progress.min_dx = -$bar_progress.getWidth();\n      $bar_progress.max_dx = $bar.getWidth() - $bar_progress.getWidth();\n    });\n    $.on(this.$svg, 'mousemove', e => {\n      if (!is_resizing) return;\n      let dx = e.offsetX - x_on_start;\n      let dy = e.offsetY - y_on_start;\n      if (dx > $bar_progress.max_dx) {\n        dx = $bar_progress.max_dx;\n      }\n      if (dx < $bar_progress.min_dx) {\n        dx = $bar_progress.min_dx;\n      }\n      const $handle = bar.$handle_progress;\n      $.attr($bar_progress, 'width', $bar_progress.owidth + dx);\n      $.attr($handle, 'points', bar.get_progress_polygon_points());\n      $bar_progress.finaldx = dx;\n    });\n    $.on(this.$svg, 'mouseup', () => {\n      is_resizing = false;\n      if (!($bar_progress && $bar_progress.finaldx)) return;\n      bar.progress_changed();\n      bar.set_action_completed();\n    });\n  }\n  get_all_dependent_tasks(task_id) {\n    let out = [];\n    let to_process = [task_id];\n    while (to_process.length) {\n      const deps = to_process.reduce((acc, curr) => {\n        acc = acc.concat(this.dependency_map[curr]);\n        return acc;\n      }, []);\n      out = out.concat(deps);\n      to_process = deps.filter(d => !to_process.includes(d));\n    }\n    return out.filter(Boolean);\n  }\n  get_snap_position(dx) {\n    let odx = dx,\n      rem,\n      position;\n    if (this.view_is(VIEW_MODE.WEEK)) {\n      rem = dx % (this.options.column_width / 7);\n      position = odx - rem + (rem < this.options.column_width / 14 ? 0 : this.options.column_width / 7);\n    } else if (this.view_is(VIEW_MODE.MONTH)) {\n      rem = dx % (this.options.column_width / 30);\n      position = odx - rem + (rem < this.options.column_width / 60 ? 0 : this.options.column_width / 30);\n    } else {\n      rem = dx % this.options.column_width;\n      position = odx - rem + (rem < this.options.column_width / 2 ? 0 : this.options.column_width);\n    }\n    return position;\n  }\n  unselect_all() {\n    [...this.$svg.querySelectorAll('.bar-wrapper')].forEach(el => {\n      el.classList.remove('active');\n    });\n  }\n  view_is(modes) {\n    if (typeof modes === 'string') {\n      return this.options.view_mode === modes;\n    }\n    if (Array.isArray(modes)) {\n      return modes.some(mode => this.options.view_mode === mode);\n    }\n    return false;\n  }\n  get_task(id) {\n    return this.tasks.find(task => {\n      return task.id === id;\n    });\n  }\n  get_bar(id) {\n    return this.bars.find(bar => {\n      return bar.task.id === id;\n    });\n  }\n  show_popup(options) {\n    if (!this.popup) {\n      this.popup = new Popup(this.popup_wrapper, this.options.custom_popup_html);\n    }\n    this.popup.show(options);\n  }\n  hide_popup() {\n    this.popup && this.popup.hide();\n  }\n  trigger_event(event, args) {\n    if (this.options['on_' + event]) {\n      this.options['on_' + event].apply(null, args);\n    }\n  }\n\n  /**\n   * Gets the oldest starting date from the list of tasks\n   *\n   * @returns Date\n   * @memberof Gantt\n   */\n  get_oldest_starting_date() {\n    return this.tasks.map(task => task._start).reduce((prev_date, cur_date) => cur_date <= prev_date ? cur_date : prev_date);\n  }\n\n  /**\n   * Clear all elements from the parent svg element\n   *\n   * @memberof Gantt\n   */\n  clear() {\n    this.$svg.innerHTML = '';\n  }\n}\nGantt.VIEW_MODE = VIEW_MODE;\nfunction generate_id(task) {\n  return task.name + '_' + Math.random().toString(36).slice(2, 12);\n}","map":{"version":3,"names":["date_utils","$","createSVG","Bar","Arrow","Popup","VIEW_MODE","QUARTER_DAY","HALF_DAY","DAY","WEEK","MONTH","YEAR","Gantt","constructor","wrapper","tasks","options","setup_wrapper","setup_options","setup_tasks","change_view_mode","bind_events","element","svg_element","wrapper_element","document","querySelector","HTMLElement","SVGElement","TypeError","$svg","append_to","class","classList","add","$container","createElement","parent_element","parentElement","appendChild","popup_wrapper","default_options","header_height","column_width","step","view_modes","Object","values","bar_height","bar_corner_radius","arrow_curve","padding","view_mode","date_format","popup_trigger","custom_popup_html","language","assign","map","task","i","_start","parse","start","_end","end","diff","_index","today","task_end_values","get_date_values","slice","every","d","invalid","dependencies","deps","split","trim","filter","id","generate_id","setup_dependencies","dependency_map","t","push","refresh","mode","update_view_scale","setup_dates","render","trigger_event","setup_gantt_dates","setup_date_values","gantt_start","gantt_end","start_of","view_is","dates","cur_date","clone","bind_grid_click","bind_bar_events","clear","setup_layers","make_grid","make_dates","make_bars","make_arrows","map_arrows_on_bars","set_width","set_scroll_position","layers","layer","make_grid_background","make_grid_rows","make_grid_header","make_grid_ticks","make_grid_highlights","grid_width","length","grid_height","x","y","width","height","grid","attr","rows_layer","lines_layer","row_width","row_height","row_y","x1","y1","x2","y2","header_width","tick_x","tick_y","tick_height","date","tick_class","getDate","getMonth","get_days_in_month","get_dates_to_draw","lower_x","lower_y","innerHTML","lower_text","upper_text","$upper_text","upper_x","upper_y","getBBox","remove","last_date","get_date_info","date_text","format","Day_lower","Week_lower","Month_lower","Year_lower","Day_upper","Week_upper","Month_upper","getFullYear","Year_upper","base_pos","x_pos","bars","bar","group","arrows","task_id","dependency","get_task","arrow","Boolean","concat","from_task","to_task","cur_width","getBoundingClientRect","actual_width","getAttribute","setAttribute","hours_before_first_task","get_oldest_starting_date","scroll_pos","scrollLeft","on","unselect_all","hide_popup","is_dragging","x_on_start","y_on_start","is_resizing_left","is_resizing_right","parent_bar_id","bar_being_dragged","action_in_progress","e","bar_wrapper","closest","contains","offsetX","offsetY","ids","get_all_dependent_tasks","get_bar","forEach","$bar","ox","getX","oy","getY","owidth","getWidth","finaldx","dx","dy","get_snap_position","update_bar_position","addEventListener","date_changed","set_action_completed","bind_bar_progress","is_resizing","$bar_progress","handle","$bar_wrapper","min_dx","max_dx","$handle","$handle_progress","get_progress_polygon_points","progress_changed","out","to_process","reduce","acc","curr","includes","odx","rem","position","querySelectorAll","el","modes","Array","isArray","some","find","show_popup","popup","show","hide","event","args","apply","prev_date","name","Math","random","toString"],"sources":["/home/vighnesh/Desktop/Projects/AnotherECommerce/GANTT-CHART-GENERATOR/frontend/node_modules/frappe-gantt/src/index.js"],"sourcesContent":["import date_utils from './date_utils';\nimport { $, createSVG } from './svg_utils';\nimport Bar from './bar';\nimport Arrow from './arrow';\nimport Popup from './popup';\n\nimport './gantt.scss';\n\nconst VIEW_MODE = {\n    QUARTER_DAY: 'Quarter Day',\n    HALF_DAY: 'Half Day',\n    DAY: 'Day',\n    WEEK: 'Week',\n    MONTH: 'Month',\n    YEAR: 'Year',\n};\n\nexport default class Gantt {\n    constructor(wrapper, tasks, options) {\n        this.setup_wrapper(wrapper);\n        this.setup_options(options);\n        this.setup_tasks(tasks);\n        // initialize with default view mode\n        this.change_view_mode();\n        this.bind_events();\n    }\n\n    setup_wrapper(element) {\n        let svg_element, wrapper_element;\n\n        // CSS Selector is passed\n        if (typeof element === 'string') {\n            element = document.querySelector(element);\n        }\n\n        // get the SVGElement\n        if (element instanceof HTMLElement) {\n            wrapper_element = element;\n            svg_element = element.querySelector('svg');\n        } else if (element instanceof SVGElement) {\n            svg_element = element;\n        } else {\n            throw new TypeError(\n                'FrappÃ© Gantt only supports usage of a string CSS selector,' +\n                    \" HTML DOM element or SVG DOM element for the 'element' parameter\"\n            );\n        }\n\n        // svg element\n        if (!svg_element) {\n            // create it\n            this.$svg = createSVG('svg', {\n                append_to: wrapper_element,\n                class: 'gantt',\n            });\n        } else {\n            this.$svg = svg_element;\n            this.$svg.classList.add('gantt');\n        }\n\n        // wrapper element\n        this.$container = document.createElement('div');\n        this.$container.classList.add('gantt-container');\n\n        const parent_element = this.$svg.parentElement;\n        parent_element.appendChild(this.$container);\n        this.$container.appendChild(this.$svg);\n\n        // popup wrapper\n        this.popup_wrapper = document.createElement('div');\n        this.popup_wrapper.classList.add('popup-wrapper');\n        this.$container.appendChild(this.popup_wrapper);\n    }\n\n    setup_options(options) {\n        const default_options = {\n            header_height: 50,\n            column_width: 30,\n            step: 24,\n            view_modes: [...Object.values(VIEW_MODE)],\n            bar_height: 20,\n            bar_corner_radius: 3,\n            arrow_curve: 5,\n            padding: 18,\n            view_mode: 'Day',\n            date_format: 'YYYY-MM-DD',\n            popup_trigger: 'click',\n            custom_popup_html: null,\n            language: 'en',\n        };\n        this.options = Object.assign({}, default_options, options);\n    }\n\n    setup_tasks(tasks) {\n        // prepare tasks\n        this.tasks = tasks.map((task, i) => {\n            // convert to Date objects\n            task._start = date_utils.parse(task.start);\n            task._end = date_utils.parse(task.end);\n\n            // make task invalid if duration too large\n            if (date_utils.diff(task._end, task._start, 'year') > 10) {\n                task.end = null;\n            }\n\n            // cache index\n            task._index = i;\n\n            // invalid dates\n            if (!task.start && !task.end) {\n                const today = date_utils.today();\n                task._start = today;\n                task._end = date_utils.add(today, 2, 'day');\n            }\n\n            if (!task.start && task.end) {\n                task._start = date_utils.add(task._end, -2, 'day');\n            }\n\n            if (task.start && !task.end) {\n                task._end = date_utils.add(task._start, 2, 'day');\n            }\n\n            // if hours is not set, assume the last day is full day\n            // e.g: 2018-09-09 becomes 2018-09-09 23:59:59\n            const task_end_values = date_utils.get_date_values(task._end);\n            if (task_end_values.slice(3).every((d) => d === 0)) {\n                task._end = date_utils.add(task._end, 24, 'hour');\n            }\n\n            // invalid flag\n            if (!task.start || !task.end) {\n                task.invalid = true;\n            }\n\n            // dependencies\n            if (typeof task.dependencies === 'string' || !task.dependencies) {\n                let deps = [];\n                if (task.dependencies) {\n                    deps = task.dependencies\n                        .split(',')\n                        .map((d) => d.trim())\n                        .filter((d) => d);\n                }\n                task.dependencies = deps;\n            }\n\n            // uids\n            if (!task.id) {\n                task.id = generate_id(task);\n            }\n\n            return task;\n        });\n\n        this.setup_dependencies();\n    }\n\n    setup_dependencies() {\n        this.dependency_map = {};\n        for (let t of this.tasks) {\n            for (let d of t.dependencies) {\n                this.dependency_map[d] = this.dependency_map[d] || [];\n                this.dependency_map[d].push(t.id);\n            }\n        }\n    }\n\n    refresh(tasks) {\n        this.setup_tasks(tasks);\n        this.change_view_mode();\n    }\n\n    change_view_mode(mode = this.options.view_mode) {\n        this.update_view_scale(mode);\n        this.setup_dates();\n        this.render();\n        // fire viewmode_change event\n        this.trigger_event('view_change', [mode]);\n    }\n\n    update_view_scale(view_mode) {\n        this.options.view_mode = view_mode;\n\n        if (view_mode === VIEW_MODE.DAY) {\n            this.options.step = 24;\n            this.options.column_width = 38;\n        } else if (view_mode === VIEW_MODE.HALF_DAY) {\n            this.options.step = 24 / 2;\n            this.options.column_width = 38;\n        } else if (view_mode === VIEW_MODE.QUARTER_DAY) {\n            this.options.step = 24 / 4;\n            this.options.column_width = 38;\n        } else if (view_mode === VIEW_MODE.WEEK) {\n            this.options.step = 24 * 7;\n            this.options.column_width = 140;\n        } else if (view_mode === VIEW_MODE.MONTH) {\n            this.options.step = 24 * 30;\n            this.options.column_width = 120;\n        } else if (view_mode === VIEW_MODE.YEAR) {\n            this.options.step = 24 * 365;\n            this.options.column_width = 120;\n        }\n    }\n\n    setup_dates() {\n        this.setup_gantt_dates();\n        this.setup_date_values();\n    }\n\n    setup_gantt_dates() {\n        this.gantt_start = this.gantt_end = null;\n\n        for (let task of this.tasks) {\n            // set global start and end date\n            if (!this.gantt_start || task._start < this.gantt_start) {\n                this.gantt_start = task._start;\n            }\n            if (!this.gantt_end || task._end > this.gantt_end) {\n                this.gantt_end = task._end;\n            }\n        }\n\n        this.gantt_start = date_utils.start_of(this.gantt_start, 'day');\n        this.gantt_end = date_utils.start_of(this.gantt_end, 'day');\n\n        // add date padding on both sides\n        if (this.view_is([VIEW_MODE.QUARTER_DAY, VIEW_MODE.HALF_DAY])) {\n            this.gantt_start = date_utils.add(this.gantt_start, -7, 'day');\n            this.gantt_end = date_utils.add(this.gantt_end, 7, 'day');\n        } else if (this.view_is(VIEW_MODE.MONTH)) {\n            this.gantt_start = date_utils.start_of(this.gantt_start, 'year');\n            this.gantt_end = date_utils.add(this.gantt_end, 1, 'year');\n        } else if (this.view_is(VIEW_MODE.YEAR)) {\n            this.gantt_start = date_utils.add(this.gantt_start, -2, 'year');\n            this.gantt_end = date_utils.add(this.gantt_end, 2, 'year');\n        } else {\n            this.gantt_start = date_utils.add(this.gantt_start, -1, 'month');\n            this.gantt_end = date_utils.add(this.gantt_end, 1, 'month');\n        }\n    }\n\n    setup_date_values() {\n        this.dates = [];\n        let cur_date = null;\n\n        while (cur_date === null || cur_date < this.gantt_end) {\n            if (!cur_date) {\n                cur_date = date_utils.clone(this.gantt_start);\n            } else {\n                if (this.view_is(VIEW_MODE.YEAR)) {\n                    cur_date = date_utils.add(cur_date, 1, 'year');\n                } else if (this.view_is(VIEW_MODE.MONTH)) {\n                    cur_date = date_utils.add(cur_date, 1, 'month');\n                } else {\n                    cur_date = date_utils.add(\n                        cur_date,\n                        this.options.step,\n                        'hour'\n                    );\n                }\n            }\n            this.dates.push(cur_date);\n        }\n    }\n\n    bind_events() {\n        this.bind_grid_click();\n        this.bind_bar_events();\n    }\n\n    render() {\n        this.clear();\n        this.setup_layers();\n        this.make_grid();\n        this.make_dates();\n        this.make_bars();\n        this.make_arrows();\n        this.map_arrows_on_bars();\n        this.set_width();\n        this.set_scroll_position();\n    }\n\n    setup_layers() {\n        this.layers = {};\n        const layers = ['grid', 'date', 'arrow', 'progress', 'bar', 'details'];\n        // make group layers\n        for (let layer of layers) {\n            this.layers[layer] = createSVG('g', {\n                class: layer,\n                append_to: this.$svg,\n            });\n        }\n    }\n\n    make_grid() {\n        this.make_grid_background();\n        this.make_grid_rows();\n        this.make_grid_header();\n        this.make_grid_ticks();\n        this.make_grid_highlights();\n    }\n\n    make_grid_background() {\n        const grid_width = this.dates.length * this.options.column_width;\n        const grid_height =\n            this.options.header_height +\n            this.options.padding +\n            (this.options.bar_height + this.options.padding) *\n                this.tasks.length;\n\n        createSVG('rect', {\n            x: 0,\n            y: 0,\n            width: grid_width,\n            height: grid_height,\n            class: 'grid-background',\n            append_to: this.layers.grid,\n        });\n\n        $.attr(this.$svg, {\n            height: grid_height + this.options.padding + 100,\n            width: '100%',\n        });\n    }\n\n    make_grid_rows() {\n        const rows_layer = createSVG('g', { append_to: this.layers.grid });\n        const lines_layer = createSVG('g', { append_to: this.layers.grid });\n\n        const row_width = this.dates.length * this.options.column_width;\n        const row_height = this.options.bar_height + this.options.padding;\n\n        let row_y = this.options.header_height + this.options.padding / 2;\n\n        for (let task of this.tasks) {\n            createSVG('rect', {\n                x: 0,\n                y: row_y,\n                width: row_width,\n                height: row_height,\n                class: 'grid-row',\n                append_to: rows_layer,\n            });\n\n            createSVG('line', {\n                x1: 0,\n                y1: row_y + row_height,\n                x2: row_width,\n                y2: row_y + row_height,\n                class: 'row-line',\n                append_to: lines_layer,\n            });\n\n            row_y += this.options.bar_height + this.options.padding;\n        }\n    }\n\n    make_grid_header() {\n        const header_width = this.dates.length * this.options.column_width;\n        const header_height = this.options.header_height + 10;\n        createSVG('rect', {\n            x: 0,\n            y: 0,\n            width: header_width,\n            height: header_height,\n            class: 'grid-header',\n            append_to: this.layers.grid,\n        });\n    }\n\n    make_grid_ticks() {\n        let tick_x = 0;\n        let tick_y = this.options.header_height + this.options.padding / 2;\n        let tick_height =\n            (this.options.bar_height + this.options.padding) *\n            this.tasks.length;\n\n        for (let date of this.dates) {\n            let tick_class = 'tick';\n            // thick tick for monday\n            if (this.view_is(VIEW_MODE.DAY) && date.getDate() === 1) {\n                tick_class += ' thick';\n            }\n            // thick tick for first week\n            if (\n                this.view_is(VIEW_MODE.WEEK) &&\n                date.getDate() >= 1 &&\n                date.getDate() < 8\n            ) {\n                tick_class += ' thick';\n            }\n            // thick ticks for quarters\n            if (\n                this.view_is(VIEW_MODE.MONTH) &&\n                (date.getMonth() + 1) % 3 === 0\n            ) {\n                tick_class += ' thick';\n            }\n\n            createSVG('path', {\n                d: `M ${tick_x} ${tick_y} v ${tick_height}`,\n                class: tick_class,\n                append_to: this.layers.grid,\n            });\n\n            if (this.view_is(VIEW_MODE.MONTH)) {\n                tick_x +=\n                    (date_utils.get_days_in_month(date) *\n                        this.options.column_width) /\n                    30;\n            } else {\n                tick_x += this.options.column_width;\n            }\n        }\n    }\n\n    make_grid_highlights() {\n        // highlight today's date\n        if (this.view_is(VIEW_MODE.DAY)) {\n            const x =\n                (date_utils.diff(date_utils.today(), this.gantt_start, 'hour') /\n                    this.options.step) *\n                this.options.column_width;\n            const y = 0;\n\n            const width = this.options.column_width;\n            const height =\n                (this.options.bar_height + this.options.padding) *\n                    this.tasks.length +\n                this.options.header_height +\n                this.options.padding / 2;\n\n            createSVG('rect', {\n                x,\n                y,\n                width,\n                height,\n                class: 'today-highlight',\n                append_to: this.layers.grid,\n            });\n        }\n    }\n\n    make_dates() {\n        for (let date of this.get_dates_to_draw()) {\n            createSVG('text', {\n                x: date.lower_x,\n                y: date.lower_y,\n                innerHTML: date.lower_text,\n                class: 'lower-text',\n                append_to: this.layers.date,\n            });\n\n            if (date.upper_text) {\n                const $upper_text = createSVG('text', {\n                    x: date.upper_x,\n                    y: date.upper_y,\n                    innerHTML: date.upper_text,\n                    class: 'upper-text',\n                    append_to: this.layers.date,\n                });\n\n                // remove out-of-bound dates\n                if (\n                    $upper_text.getBBox().x2 > this.layers.grid.getBBox().width\n                ) {\n                    $upper_text.remove();\n                }\n            }\n        }\n    }\n\n    get_dates_to_draw() {\n        let last_date = null;\n        const dates = this.dates.map((date, i) => {\n            const d = this.get_date_info(date, last_date, i);\n            last_date = date;\n            return d;\n        });\n        return dates;\n    }\n\n    get_date_info(date, last_date, i) {\n        if (!last_date) {\n            last_date = date_utils.add(date, 1, 'year');\n        }\n        const date_text = {\n            'Quarter Day_lower': date_utils.format(\n                date,\n                'HH',\n                this.options.language\n            ),\n            'Half Day_lower': date_utils.format(\n                date,\n                'HH',\n                this.options.language\n            ),\n            Day_lower:\n                date.getDate() !== last_date.getDate()\n                    ? date_utils.format(date, 'D', this.options.language)\n                    : '',\n            Week_lower:\n                date.getMonth() !== last_date.getMonth()\n                    ? date_utils.format(date, 'D MMM', this.options.language)\n                    : date_utils.format(date, 'D', this.options.language),\n            Month_lower: date_utils.format(date, 'MMMM', this.options.language),\n            Year_lower: date_utils.format(date, 'YYYY', this.options.language),\n            'Quarter Day_upper':\n                date.getDate() !== last_date.getDate()\n                    ? date_utils.format(date, 'D MMM', this.options.language)\n                    : '',\n            'Half Day_upper':\n                date.getDate() !== last_date.getDate()\n                    ? date.getMonth() !== last_date.getMonth()\n                        ? date_utils.format(\n                              date,\n                              'D MMM',\n                              this.options.language\n                          )\n                        : date_utils.format(date, 'D', this.options.language)\n                    : '',\n            Day_upper:\n                date.getMonth() !== last_date.getMonth()\n                    ? date_utils.format(date, 'MMMM', this.options.language)\n                    : '',\n            Week_upper:\n                date.getMonth() !== last_date.getMonth()\n                    ? date_utils.format(date, 'MMMM', this.options.language)\n                    : '',\n            Month_upper:\n                date.getFullYear() !== last_date.getFullYear()\n                    ? date_utils.format(date, 'YYYY', this.options.language)\n                    : '',\n            Year_upper:\n                date.getFullYear() !== last_date.getFullYear()\n                    ? date_utils.format(date, 'YYYY', this.options.language)\n                    : '',\n        };\n\n        const base_pos = {\n            x: i * this.options.column_width,\n            lower_y: this.options.header_height,\n            upper_y: this.options.header_height - 25,\n        };\n\n        const x_pos = {\n            'Quarter Day_lower': (this.options.column_width * 4) / 2,\n            'Quarter Day_upper': 0,\n            'Half Day_lower': (this.options.column_width * 2) / 2,\n            'Half Day_upper': 0,\n            Day_lower: this.options.column_width / 2,\n            Day_upper: (this.options.column_width * 30) / 2,\n            Week_lower: 0,\n            Week_upper: (this.options.column_width * 4) / 2,\n            Month_lower: this.options.column_width / 2,\n            Month_upper: (this.options.column_width * 12) / 2,\n            Year_lower: this.options.column_width / 2,\n            Year_upper: (this.options.column_width * 30) / 2,\n        };\n\n        return {\n            upper_text: date_text[`${this.options.view_mode}_upper`],\n            lower_text: date_text[`${this.options.view_mode}_lower`],\n            upper_x: base_pos.x + x_pos[`${this.options.view_mode}_upper`],\n            upper_y: base_pos.upper_y,\n            lower_x: base_pos.x + x_pos[`${this.options.view_mode}_lower`],\n            lower_y: base_pos.lower_y,\n        };\n    }\n\n    make_bars() {\n        this.bars = this.tasks.map((task) => {\n            const bar = new Bar(this, task);\n            this.layers.bar.appendChild(bar.group);\n            return bar;\n        });\n    }\n\n    make_arrows() {\n        this.arrows = [];\n        for (let task of this.tasks) {\n            let arrows = [];\n            arrows = task.dependencies\n                .map((task_id) => {\n                    const dependency = this.get_task(task_id);\n                    if (!dependency) return;\n                    const arrow = new Arrow(\n                        this,\n                        this.bars[dependency._index], // from_task\n                        this.bars[task._index] // to_task\n                    );\n                    this.layers.arrow.appendChild(arrow.element);\n                    return arrow;\n                })\n                .filter(Boolean); // filter falsy values\n            this.arrows = this.arrows.concat(arrows);\n        }\n    }\n\n    map_arrows_on_bars() {\n        for (let bar of this.bars) {\n            bar.arrows = this.arrows.filter((arrow) => {\n                return (\n                    arrow.from_task.task.id === bar.task.id ||\n                    arrow.to_task.task.id === bar.task.id\n                );\n            });\n        }\n    }\n\n    set_width() {\n        const cur_width = this.$svg.getBoundingClientRect().width;\n        const actual_width = this.$svg\n            .querySelector('.grid .grid-row')\n            .getAttribute('width');\n        if (cur_width < actual_width) {\n            this.$svg.setAttribute('width', actual_width);\n        }\n    }\n\n    set_scroll_position() {\n        const parent_element = this.$svg.parentElement;\n        if (!parent_element) return;\n\n        const hours_before_first_task = date_utils.diff(\n            this.get_oldest_starting_date(),\n            this.gantt_start,\n            'hour'\n        );\n\n        const scroll_pos =\n            (hours_before_first_task / this.options.step) *\n                this.options.column_width -\n            this.options.column_width;\n\n        parent_element.scrollLeft = scroll_pos;\n    }\n\n    bind_grid_click() {\n        $.on(\n            this.$svg,\n            this.options.popup_trigger,\n            '.grid-row, .grid-header',\n            () => {\n                this.unselect_all();\n                this.hide_popup();\n            }\n        );\n    }\n\n    bind_bar_events() {\n        let is_dragging = false;\n        let x_on_start = 0;\n        let y_on_start = 0;\n        let is_resizing_left = false;\n        let is_resizing_right = false;\n        let parent_bar_id = null;\n        let bars = []; // instanceof Bar\n        this.bar_being_dragged = null;\n\n        function action_in_progress() {\n            return is_dragging || is_resizing_left || is_resizing_right;\n        }\n\n        $.on(this.$svg, 'mousedown', '.bar-wrapper, .handle', (e, element) => {\n            const bar_wrapper = $.closest('.bar-wrapper', element);\n\n            if (element.classList.contains('left')) {\n                is_resizing_left = true;\n            } else if (element.classList.contains('right')) {\n                is_resizing_right = true;\n            } else if (element.classList.contains('bar-wrapper')) {\n                is_dragging = true;\n            }\n\n            bar_wrapper.classList.add('active');\n\n            x_on_start = e.offsetX;\n            y_on_start = e.offsetY;\n\n            parent_bar_id = bar_wrapper.getAttribute('data-id');\n            const ids = [\n                parent_bar_id,\n                ...this.get_all_dependent_tasks(parent_bar_id),\n            ];\n            bars = ids.map((id) => this.get_bar(id));\n\n            this.bar_being_dragged = parent_bar_id;\n\n            bars.forEach((bar) => {\n                const $bar = bar.$bar;\n                $bar.ox = $bar.getX();\n                $bar.oy = $bar.getY();\n                $bar.owidth = $bar.getWidth();\n                $bar.finaldx = 0;\n            });\n        });\n\n        $.on(this.$svg, 'mousemove', (e) => {\n            if (!action_in_progress()) return;\n            const dx = e.offsetX - x_on_start;\n            const dy = e.offsetY - y_on_start;\n\n            bars.forEach((bar) => {\n                const $bar = bar.$bar;\n                $bar.finaldx = this.get_snap_position(dx);\n                this.hide_popup();\n                if (is_resizing_left) {\n                    if (parent_bar_id === bar.task.id) {\n                        bar.update_bar_position({\n                            x: $bar.ox + $bar.finaldx,\n                            width: $bar.owidth - $bar.finaldx,\n                        });\n                    } else {\n                        bar.update_bar_position({\n                            x: $bar.ox + $bar.finaldx,\n                        });\n                    }\n                } else if (is_resizing_right) {\n                    if (parent_bar_id === bar.task.id) {\n                        bar.update_bar_position({\n                            width: $bar.owidth + $bar.finaldx,\n                        });\n                    }\n                } else if (is_dragging) {\n                    bar.update_bar_position({ x: $bar.ox + $bar.finaldx });\n                }\n            });\n        });\n\n        document.addEventListener('mouseup', (e) => {\n            if (is_dragging || is_resizing_left || is_resizing_right) {\n                bars.forEach((bar) => bar.group.classList.remove('active'));\n            }\n\n            is_dragging = false;\n            is_resizing_left = false;\n            is_resizing_right = false;\n        });\n\n        $.on(this.$svg, 'mouseup', (e) => {\n            this.bar_being_dragged = null;\n            bars.forEach((bar) => {\n                const $bar = bar.$bar;\n                if (!$bar.finaldx) return;\n                bar.date_changed();\n                bar.set_action_completed();\n            });\n        });\n\n        this.bind_bar_progress();\n    }\n\n    bind_bar_progress() {\n        let x_on_start = 0;\n        let y_on_start = 0;\n        let is_resizing = null;\n        let bar = null;\n        let $bar_progress = null;\n        let $bar = null;\n\n        $.on(this.$svg, 'mousedown', '.handle.progress', (e, handle) => {\n            is_resizing = true;\n            x_on_start = e.offsetX;\n            y_on_start = e.offsetY;\n\n            const $bar_wrapper = $.closest('.bar-wrapper', handle);\n            const id = $bar_wrapper.getAttribute('data-id');\n            bar = this.get_bar(id);\n\n            $bar_progress = bar.$bar_progress;\n            $bar = bar.$bar;\n\n            $bar_progress.finaldx = 0;\n            $bar_progress.owidth = $bar_progress.getWidth();\n            $bar_progress.min_dx = -$bar_progress.getWidth();\n            $bar_progress.max_dx = $bar.getWidth() - $bar_progress.getWidth();\n        });\n\n        $.on(this.$svg, 'mousemove', (e) => {\n            if (!is_resizing) return;\n            let dx = e.offsetX - x_on_start;\n            let dy = e.offsetY - y_on_start;\n\n            if (dx > $bar_progress.max_dx) {\n                dx = $bar_progress.max_dx;\n            }\n            if (dx < $bar_progress.min_dx) {\n                dx = $bar_progress.min_dx;\n            }\n\n            const $handle = bar.$handle_progress;\n            $.attr($bar_progress, 'width', $bar_progress.owidth + dx);\n            $.attr($handle, 'points', bar.get_progress_polygon_points());\n            $bar_progress.finaldx = dx;\n        });\n\n        $.on(this.$svg, 'mouseup', () => {\n            is_resizing = false;\n            if (!($bar_progress && $bar_progress.finaldx)) return;\n            bar.progress_changed();\n            bar.set_action_completed();\n        });\n    }\n\n    get_all_dependent_tasks(task_id) {\n        let out = [];\n        let to_process = [task_id];\n        while (to_process.length) {\n            const deps = to_process.reduce((acc, curr) => {\n                acc = acc.concat(this.dependency_map[curr]);\n                return acc;\n            }, []);\n\n            out = out.concat(deps);\n            to_process = deps.filter((d) => !to_process.includes(d));\n        }\n\n        return out.filter(Boolean);\n    }\n\n    get_snap_position(dx) {\n        let odx = dx,\n            rem,\n            position;\n\n        if (this.view_is(VIEW_MODE.WEEK)) {\n            rem = dx % (this.options.column_width / 7);\n            position =\n                odx -\n                rem +\n                (rem < this.options.column_width / 14\n                    ? 0\n                    : this.options.column_width / 7);\n        } else if (this.view_is(VIEW_MODE.MONTH)) {\n            rem = dx % (this.options.column_width / 30);\n            position =\n                odx -\n                rem +\n                (rem < this.options.column_width / 60\n                    ? 0\n                    : this.options.column_width / 30);\n        } else {\n            rem = dx % this.options.column_width;\n            position =\n                odx -\n                rem +\n                (rem < this.options.column_width / 2\n                    ? 0\n                    : this.options.column_width);\n        }\n        return position;\n    }\n\n    unselect_all() {\n        [...this.$svg.querySelectorAll('.bar-wrapper')].forEach((el) => {\n            el.classList.remove('active');\n        });\n    }\n\n    view_is(modes) {\n        if (typeof modes === 'string') {\n            return this.options.view_mode === modes;\n        }\n\n        if (Array.isArray(modes)) {\n            return modes.some((mode) => this.options.view_mode === mode);\n        }\n\n        return false;\n    }\n\n    get_task(id) {\n        return this.tasks.find((task) => {\n            return task.id === id;\n        });\n    }\n\n    get_bar(id) {\n        return this.bars.find((bar) => {\n            return bar.task.id === id;\n        });\n    }\n\n    show_popup(options) {\n        if (!this.popup) {\n            this.popup = new Popup(\n                this.popup_wrapper,\n                this.options.custom_popup_html\n            );\n        }\n        this.popup.show(options);\n    }\n\n    hide_popup() {\n        this.popup && this.popup.hide();\n    }\n\n    trigger_event(event, args) {\n        if (this.options['on_' + event]) {\n            this.options['on_' + event].apply(null, args);\n        }\n    }\n\n    /**\n     * Gets the oldest starting date from the list of tasks\n     *\n     * @returns Date\n     * @memberof Gantt\n     */\n    get_oldest_starting_date() {\n        return this.tasks\n            .map((task) => task._start)\n            .reduce((prev_date, cur_date) =>\n                cur_date <= prev_date ? cur_date : prev_date\n            );\n    }\n\n    /**\n     * Clear all elements from the parent svg element\n     *\n     * @memberof Gantt\n     */\n    clear() {\n        this.$svg.innerHTML = '';\n    }\n}\n\nGantt.VIEW_MODE = VIEW_MODE;\n\nfunction generate_id(task) {\n    return task.name + '_' + Math.random().toString(36).slice(2, 12);\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}